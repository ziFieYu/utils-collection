package org.sa.utils.hadoop.kafka.config

import org.apache.kafka.clients.producer.{KafkaProducer, ProducerConfig}

import scala.reflect._

/**
 * Created by Stuart Alex on 2017/3/29.
 */
object KafkaProducerProperties {

    def builder(): Builder = {
        new Builder()
    }

    class Builder extends PropertiesBuilder[ProducerConfig] {

        import org.apache.kafka.clients.producer.ProducerConfig._

        def newProducer[K, V]: KafkaProducer[K, V] = {
            new KafkaProducer[K, V](build())
        }

        /**
         * The number of acknowledgments the producer requires the leader to have received before considering a request complete. This controls the durability of records that are sent. The following settings are allowed:
         * 1. acks=0      If set to zero then the producer will not wait for any acknowledgment from the server at all. The record will be immediately added to the socket buffer and considered sent.
         * |              No guarantee can be made that the server has received the record in this case, and the retries configuration will not take effect (as the client won't generally know of any failures).
         * |              The offset given back for each record will always be set to -1.
         * 2. acks=1      This will mean the leader will write the record to its local log but will respond without awaiting full acknowledgement from all followers.
         * |              In this case should the leader fail immediately after acknowledging the record but before the followers have replicated it then the record will be lost.
         * 3. acks=-1/all This means the leader will wait for the full set of in-sync replicas to acknowledge the record. This guarantees that the record will not be lost as long as at least one in-sync replica remains alive.
         * |              This is the strongest available guarantee. This is equivalent to the acks=-1 setting.
         *
         * @param value
         * @return
         */
        def ACKS(value: AnyRef): this.type = {
            properties.put(ACKS_CONFIG, value)
            this
        }

        /**
         * The producer will attempt to batch records together into fewer requests whenever multiple records are being sent to the same partition. This helps performance on both the client and the server.
         * This configuration controls the default batch size in bytes. No attempt will be made to batch records larger than this size.
         * Requests sent to brokers will contain multiple batches, one for each partition with data available to be sent.
         * A small batch size will make batching less common and may reduce throughput (a batch size of zero will disable batching entirely).
         * A very large batch size may use memory a bit more wastefully as we will always allocate a buffer of the specified batch size in anticipation of additional records.
         *
         * @param value
         * @return
         */
        def BATCH_SIZE(value: Int): this.type = {
            properties.put(BATCH_SIZE_CONFIG, new Integer(value))
            this
        }

        /**
         * kafka brokers' address (with port)
         *
         * @param value
         * @return
         */
        def BOOTSTRAP_SERVERS(value: AnyRef): this.type = {
            properties.put(BOOTSTRAP_SERVERS_CONFIG, value)
            this
        }

        /**
         * The total bytes of memory the producer can use to buffer records waiting to be sent to the server.
         * If records are sent faster than they can be delivered to the server the producer will block for <code>max.block.ms</code> after which it will throw an exception.
         * This setting should correspond roughly to the total memory the producer will use, but is not a hard bound since not all memory the producer uses is used for buffering.
         * Some additional memory will be used for compression (if compression is enabled) as well as for maintaining in-flight requests.
         *
         * @param value
         * @return
         */
        def BUFFER_MEMORY(value: AnyRef): this.type = {
            properties.put(BUFFER_MEMORY_CONFIG, value)
            this
        }

        /**
         *
         * @param value
         * @return
         */
        def CLIENT_ID(value: AnyRef): this.type = {
            properties.put(CLIENT_ID_CONFIG, value)
            this
        }

        /**
         * The compression type for all data generated by the producer. The default is none (i.e. no compression).
         * Valid  values are <code>none</code>, <code>gzip</code>, <code>snappy</code>, <code>lz4</code>, or <code>zstd</code>.
         * Compression is of full batches of data, so the efficacy of batching will also impact the compression ratio (more batching means better compression).
         *
         * @param value
         * @return
         */
        def COMPRESSION_TYPE(value: AnyRef): this.type = {
            properties.put(COMPRESSION_TYPE_CONFIG, value)
            this
        }

        /**
         *
         * @param value
         * @return
         */
        def CONNECTIONS_MAX_IDLE_MS(value: AnyRef): this.type = {
            properties.put(CONNECTIONS_MAX_IDLE_MS_CONFIG, value)
            this
        }

        /**
         * When set to 'true', the producer will ensure that exactly one copy of each message is written in the stream.
         * If 'false', producer retries due to broker failures, etc., may write duplicates of the retried message in the stream.
         * Note that enabling idempotence requires <code>max.in.flight.requests.per.connection</code> to be less than or equal to 5, <code>retries</code> to be greater than 0 and <code>acks</code> must be 'all'.
         * If these values are not explicitly set by the user, suitable values will be chosen. If incompatible values are set, a <code>ConfigException</code> will be thrown.
         *
         * @param value
         * @return
         */
        def ENABLE_IDEMPOTENCE(value: AnyRef): this.type = {
            properties.put(ENABLE_IDEMPOTENCE_CONFIG, value)
            this
        }

        /**
         * A list of classes to use as interceptors.
         * Implementing the [[org.apache.kafka.clients.producer.ProducerInterceptor]] interface allows you to intercept (and possibly mutate) the records received by the producer before they are published to the Kafka cluster.
         * By default, there are no interceptors.
         *
         * @param value
         * @return
         */
        def INTERCEPTOR_CLASSES(value: AnyRef): this.type = {
            properties.put(INTERCEPTOR_CLASSES_CONFIG, value)
            this
        }

        /**
         * Serializer class for key that implements the [[org.apache.kafka.common.serialization.Serializer]] interface.
         *
         * @tparam T
         * @return
         */
        def KEY_SERIALIZER_CLASS[T: ClassTag]: this.type = {
            properties.put(KEY_SERIALIZER_CLASS_CONFIG, classTag[T].runtimeClass)
            this
        }

        /**
         * The producer groups together any records that arrive in between request transmissions into a single batched request.
         * Normally this occurs only under load when records arrive faster than they can be sent out.
         * However in some circumstances the client may want to reduce the number of requests even under moderate load.
         * This setting accomplishes this by adding a small amount of artificial delay——that is,
         * rather than immediately sending out a record the producer will wait for up to the given delay to allow other records to be sent so that the sends can be batched together.
         * This can be thought of as analogous to Nagle's algorithm in TCP.
         * This setting gives the upper bound on the delay for batching: once we get <code>batch.size</code> worth of records for a partition it will be sent immediately regardless of this setting,
         * however if we have fewer than this many bytes accumulated for this partition we will 'linger' for the specified time waiting for more records to show up.
         * This setting defaults to 0 (i.e. no delay). Setting <code>linger.ms=5</code>, for example,
         * would have the effect of reducing the number of requests sent but would add up to 5ms of latency to records sent in the absence of load.
         *
         * @param value
         * @return
         */
        def LINGER_MS(value: Int): this.type = {
            properties.put(LINGER_MS_CONFIG, new Integer(value))
            this
        }

        /**
         * The configuration controls how long [[org.apache.kafka.clients.producer.KafkaProducer]].send() and [[org.apache.kafka.clients.producer.KafkaProducer]].partitionsFor()</code> will block.
         * These methods can be blocked either because the buffer is full or metadata unavailable.Blocking in the user-supplied serializers or partitioner will not be counted against this timeout.
         *
         * @param value
         * @return
         */
        def MAX_BLOCK_MS(value: AnyRef): this.type = {
            properties.put(MAX_BLOCK_MS_CONFIG, value)
            this
        }

        /**
         * The maximum size of a request in bytes.
         * This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests.
         * This is also effectively a cap on the maximum record batch size.
         * Note that the server has its own cap on record batch size which may be different from this.
         *
         * @param value
         * @return
         */
        def MAX_REQUEST_SIZE(value: AnyRef): this.type = {
            properties.put(MAX_REQUEST_SIZE_CONFIG, value)
            this
        }

        /**
         * The period of time in milliseconds after which we force a refresh of metadata even if we haven't seen any partition leadership changes to proactively discover any new brokers or partitions.
         *
         * @param value
         * @return
         */
        def METADATA_MAX_AGE(value: AnyRef): this.type = {
            properties.put(METADATA_MAX_AGE_CONFIG, value)
            this
        }

        def METRICS_NUM_SAMPLES(value: AnyRef): this.type = {
            properties.put(METRICS_NUM_SAMPLES_CONFIG, value)
            this
        }

        def METRICS_RECORDING_LEVEL(value: AnyRef): this.type = {
            properties.put(METRICS_RECORDING_LEVEL_CONFIG, value)
            this
        }

        def METRICS_SAMPLE_WINDOW_MS(value: AnyRef): this.type = {
            properties.put(METRICS_SAMPLE_WINDOW_MS_CONFIG, value)
            this
        }

        def METRIC_REPORTER_CLASSES(value: AnyRef): this.type = {
            properties.put(METRIC_REPORTER_CLASSES_CONFIG, value)
            this
        }

        /**
         * Partitioner class that implements the [[org.apache.kafka.clients.producer.Partitioner]] interface.
         *
         * @param value
         * @return
         */
        def PARTITIONER_CLASS(value: AnyRef): this.type = {
            properties.put(PARTITIONER_CLASS_CONFIG, value)
            this
        }

        def RECEIVE_BUFFER(value: AnyRef): this.type = {
            properties.put(RECEIVE_BUFFER_CONFIG, value)
            this
        }

        def RECONNECT_BACKOFF_MAX_MS(value: AnyRef): this.type = {
            properties.put(RECONNECT_BACKOFF_MAX_MS_CONFIG, value)
            this
        }

        def RECONNECT_BACKOFF_MS(value: AnyRef): this.type = {
            properties.put(RECONNECT_BACKOFF_MS_CONFIG, value)
            this
        }

        /**
         * The configuration controls the maximum amount of time the client will wait for the response of a request.
         * If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted.
         * This should be larger than <code>replica.lag.time.max.ms</code> (a broker configuration) to reduce the possibility of message duplication due to unnecessary producer retries.
         *
         * @param value
         * @return
         */
        def REQUEST_TIMEOUT_MS(value: AnyRef): this.type = {
            properties.put(REQUEST_TIMEOUT_MS_CONFIG, value)
            this
        }

        /**
         * Setting a value greater than zero will cause the client to resend any record whose send fails with a potentially transient error.
         * Note that this retry is no different than if the client resent the record upon receiving the error.
         * Allowing retries without setting <code>max.in.flight.requests.per.connection</code> to 1 will potentially change the ordering of records because if two batches are sent to a single partition,
         * and the first fails and is retried but the second succeeds, then the records in the second batch may appear first.
         * Note additionally that produce requests will be failed before the number of retries has been exhausted if the timeout configured by <code>delivery.timeout.ms</code> expires first before successful acknowledgement.
         * Users should generally prefer to leave this config unset and instead use <code>delivery.timeout.ms</code> to control retry behavior.
         *
         * @param value
         * @return
         */
        def RETRIES(value: Int): this.type = {
            properties.put(RETRIES_CONFIG, new Integer(value))
            this
        }

        def RETRY_BACKOFF_MS(value: AnyRef): this.type = {
            properties.put(RETRY_BACKOFF_MS_CONFIG, value)
            this
        }

        def SEND_BUFFER(value: AnyRef): this.type = {
            properties.put(SEND_BUFFER_CONFIG, value)
            this
        }

        /**
         * The TransactionalId to use for transactional delivery.
         * This enables reliability semantics which span multiple producer sessions since it allows the client to guarantee that transactions using the same TransactionalId have been completed prior to starting any new transactions.
         * If no TransactionalId is provided, then the producer is limited to idempotent delivery.
         * Note that <code>enable.idempotence</code> must be enabled if a TransactionalId is configured.
         * The default is <code>null</code>, which means transactions cannot be used.
         * Note that, by default, transactions require a cluster of at least three brokers which is the recommended setting for production;
         * for development you can change this, by adjusting broker setting <code>transaction.state.log.replication.factor</code>.
         *
         * @param value
         * @return
         */
        def TRANSACTIONAL_ID(value: AnyRef): this.type = {
            properties.put(TRANSACTIONAL_ID_CONFIG, value)
            this
        }

        /**
         * The maximum amount of time in ms that the transaction coordinator will wait for a transaction status update from the producer before proactively aborting the ongoing transaction.
         * If this value is larger than the transaction.max.timeout.ms setting in the broker, the request will fail with a [[InvalidTransactionTimeout]] error.
         *
         * @param value
         * @return
         */
        def TRANSACTION_TIMEOUT(value: AnyRef): this.type = {
            properties.put(TRANSACTION_TIMEOUT_CONFIG, value)
            this
        }

        /**
         * Serializer class for value that implements the [[org.apache.kafka.common.serialization.Serializer]] interface.
         *
         * @tparam T
         * @return
         */
        def VALUE_SERIALIZER_CLASS[T: ClassTag]: this.type = {
            properties.put(VALUE_SERIALIZER_CLASS_CONFIG, classTag[T].runtimeClass)
            this
        }
    }

}